#! /bin/bash
set -e
### Translate primary.xml:
# <metadata xmlns="http://linux.duke.edu/metadata/common" xmlns:rpm="http://linux.duke.edu/metadata/rpm" packages="3">
# <package type="rpm">
#   <name>release-notes-sles</name>
#   <arch>noarch</arch>
#   <version epoch="0" ver="15.0.20180605" rel="1.1"/>
#   <checksum type="sha256" pkgid="YES">7dd7c4ff468cbed4978e93163be38078333426ad48717a2122b4df9970878d70</checksum>
# </package>
# </metadata>
#
### Into susedata.xml:
# <susedata xmlns="http://linux.duke.edu/metadata/susedata" packages="3">
#   <package pkgid="7dd7c4ff468cbed4978e93163be38078333426ad48717a2122b4df9970878d70" name="release-notes-sles" arch="noarch">
#     <version epoch="0" ver="15.0.20180605" rel="1.1"/>
#     <keyword>support_l3</keyword>
#   </package>
# </susedata>

function usage() {
cat <<EOF
Usage: $(basename $0) PRIMARY_XML [KEYWORD]

Translate file PRIMARY_XML into a 'susedata.xml' sskeleton. Optionally inject
a KEYWORD for each package. An existing 'susedata.xml' is overwritten.

If KEYWORD is the name of an existing file, the keyword definition is read from
there. Otherwise the value of KEYWORD is assigned as keyword to all packages.

In a keyword definition file empty lines and lines starting with # are ignored.
Lines may contain exactly 2 words: a package name and the keyword to assign to
this package in case it occurs in the PRIMARY_XML. At most one line may contain
a single word, defining the default keyword to assign to those packages which do
not have a separate definition line. Otherwise these packages will have no
keyword assigned.

Afterwards 'modifyrepo --mdtype "susedata"' (package: createrepo) can be used to
add 'susedata.xml' to the repo metadata.

Usecase: Define the vendor support level for packages. On SLES based systems
zypper will show packages with unknown support status as well as packages which
claim to be unsupported or need and additional contact with the packages vendor.

See https://en.opensuse.org/openSUSE:Standards_Rpm_Metadata for more info.

Example: $(basename $0) primary.xml support_unsupported
         VERBOSE=1 $(basename $0) primary.xml support_unsupported
EOF
}

function cat_decompress() {
  case "$1" in
   *.gz)    gzip -dc "$1" ;;
   *.bz2)   bzip2 -dc "$1" ;;
   *.lzma)  lzma -dc "$1" ;;
   *.xz)    xz -dc "$1" ;;
   *)       cat "$1" ;;
  esac
}


(( $# )) || { usage; exit 0; }

PRIMARY="$1"
[ -s "$PRIMARY" ] || {
  echo "$(basename $0): File '$PRIMARY' is empty or does not exist. Exiting." >&2
  exit 1
}

KEYWORD="$2"
if [ -s "$KEYWORD" ]; then
  KEYWORD_VAR="KEYWORDFILE"
else
  KEYWORD_VAR="KEYWORD"
fi


SUSEDATA="susedata.xml"
SUSEDATA_TMP="$SUSEDATA.$$"
[ ! -e "$SUSEDATA_TMP" ] || {
  echo "$(basename $0): OOps! A temp file '$SUSEDATA_TMP' exists. Exiting." >&2
  exit 3
}
trap "[ ! -e "$SUSEDATA_TMP" ] || rm -v -f -- '$SUSEDATA_TMP'" 0 1 2 3 9 13 15
echo "prepare '$SUSEDATA_TMP'"

cat_decompress "$PRIMARY" |
  awk -v "$KEYWORD_VAR"="$KEYWORD" -v SUSEDATA="$SUSEDATA_TMP" -v VERBOSE="$VERBOSE" '
    BEGIN {
      kwd[""] = KEYWORD # default; kwd[name] may be assigned from file
      if ( KEYWORDFILE ) readkeyworddef( KEYWORDFILE )
    }
    function readkeyworddef( inp ) {
      checkok = 1 # bool
      while ( getline <inp > 0 ) {
        if ( !NF || match($1,"^#") ) continue # empty or comment
        if ( NF == 1 ) {
	  if ( kwd[""] ) {
	    printf( "%s: Multiple default keywords defined. Found `%s` and now `%s`.\n", inp, kwd[""], $1 )> "/dev/stderr"
	    checkok = 0
	  } else
	    kwd[""] = $1
        }
        else if ( NF == 2 ) {
	  if ( $1 in kwd ) {
	    printf( "%s: Multiple keywords defined for `%s`. Found `%s` and now `%s`.\n", inp, $1, kwd[$1], $2 )> "/dev/stderr"
	    checkok = 0
	  } else
	    kwd[$1] = $2
        }
        else {
	  printf( "%s: Keyword definition line has more than 2 words: %s \n", inp, $0 )> "/dev/stderr"
	  checkok = 0
        }
      }
      if ( ! checkok ) {
	printf( "%s: Exiting.\n", inp )> "/dev/stderr"
	exit 10
      }
    }

    function tagvalue( l ) { # get value from "<tag>value</tag>"
      sub( "^[^>]*>", "", l )
      sub( "<[^<]*$", "", l )
      return l
    }

    function getkeyword( n ) {
      if ( n in kwd ) return kwd[n]
      return kwd[""]
    }

    function writeoutcheck() {
      indices="nvac"
      checkok = 1 # bool
      if ( length(pkg) != length(indices) ) {
	got = ""; for ( t in pkg ) got = got t
	printf( "L%d: Expected %d package tags (%s) but got %d (%s).\n", NR, length(indices), indices, length(pkg), got )> "/dev/stderr"
	checkok = 0
      }
      for ( t in pkg ) {
	if ( ! length(pkg[t]) ) {
	  printf( "L%d: Package tag `%s` is empty.\n", NR, t )> "/dev/stderr"
	  return false
	}
      }
      return checkok
    }

    function writeout() {
      if ( ! writeoutcheck() ) {
	printf( "L%d: Exiting at %s.%s\n", NR, pkg["n"], pkg["a"] )> "/dev/stderr"
	exit 11
      }
      k = getkeyword( pkg["n"] )
      if ( VERBOSE ) printf( "- %s.%s", pkg["n"], pkg["a"], k )
      printf( "  <package pkgid=\"%s\" name=\"%s\" arch=\"%s\">\n", pkg["c"], pkg["n"], pkg["a"] )>SUSEDATA
      printf( "  %s\n", pkg["v"] )>SUSEDATA
      if ( k ) {
	if ( VERBOSE ) printf( " : %s", k )
	printf( "    <keyword>%s</keyword>\n", k )>SUSEDATA
      }
      printf( "  </package>\n" )>SUSEDATA
      if ( VERBOSE ) printf( "\n" )
    }


    /^<\?xml /      { print( $0 ) >SUSEDATA }
    /^<metadata /   { sub( "^.*packages=", "" )
                      printf( "<susedata xmlns=\"http://linux.duke.edu/metadata/susedata\" packages=%s\n", $0 )>SUSEDATA }

    /^<package /    { delete pkg }
    /^  <name>/     { pkg["n"] = tagvalue( $0 ) }
    /^  <arch>/     { pkg["a"] = tagvalue( $0 ) }
    /^  <version /  { pkg["v"] = $0 }
    /^  <checksum / { pkg["c"] = tagvalue( $0 ) }
    /^<\/package>/  { writeout() }

    /^<\/metadata>/  { print( "</susedata>" )>SUSEDATA }
  '

# we rely on `set -e`, i.e. here we're sure awk etc. succeeded
[ ! -s "$SUSEDATA_TMP" ] || {
    mv -v "$SUSEDATA_TMP" "$SUSEDATA"
}
